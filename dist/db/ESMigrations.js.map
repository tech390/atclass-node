{"version":3,"sources":["../../src/db/ESMigrations.js"],"names":["ESMigrations","currentFileName","esIndices","fs","readdirSync","path","join","__dirname","filter","file","esIndicesData","forEach","filename","content","readFileSync","split","JSON","parse","processMigrations","err","Log","info","child","message","stack","results","Object","entries","key","value","push","runMigrations","Promise","all","esIndexName","esIndiceBody","indexExists","client","indices","exists","index","create","body","esMigrations"],"mappings":";;;;;;;;;;;AAAA;;;;AACA;;AAGA;;AACA;;;;;;;;IACMA,Y;;;;;;;oCAEU;AACR,gBAAIC,kBAAkB,IAAtB;AACA,gBAAI;AACA,oBAAMC,YAAYC,aAAGC,WAAH,CAAeC,eAAKC,IAAL,CAAUC,SAAV,EAAqB,iBAArB,CAAf,EACbC,MADa,CACN;AAAA,2BAAQC,SAAS,UAAjB;AAAA,iBADM,CAAlB;;AAGA,oBAAIC,gBAAgB,EAApB;AACAR,0BAAUS,OAAV,CAAkB,UAAUC,QAAV,EAAoB;AAClCX,sCAAkBW,QAAlB;AACA,wBAAIC,UAAUV,aAAGW,YAAH,CAAgBT,eAAKC,IAAL,CAAUC,SAAV,EAAqB,iBAArB,EAAwCK,QAAxC,CAAhB,CAAd;AACAF,kCAAcE,SAASG,KAAT,CAAe,GAAf,EAAoB,CAApB,CAAd,IAAwCC,KAAKC,KAAL,CAAWJ,OAAX,CAAxC;AACH,iBAJD;AAKA,uBAAO,MAAM,KAAKK,iBAAL,CAAuBR,aAAvB,CAAb;AACH,aAXD,CAWE,OAAOS,GAAP,EAAY;AACVC,8BAAIC,IAAJ,sCAA4CpB,eAA5C;AACAmB,8BAAIE,KAAJ,CAAU;AACNC,6BAASJ,IAAII,OADP;AAENC,2BAAOL,IAAIK;AAFL,iBAAV,EAGGH,IAHH,sCAG2CpB,eAH3C;AAIA,uBAAOkB,GAAP;AACH;AACJ;;;gDAEuBT,a,EAAe;AACnC,gBAAMe,UAAU,EAAhB;AADmC;AAAA;AAAA;;AAAA;AAEnC,qCAA2BC,OAAOC,OAAP,CAAejB,aAAf,CAA3B,8HAA0D;AAAA;AAAA,wBAA9CkB,GAA8C;AAAA,wBAAzCC,KAAyC;;AACtDJ,4BAAQK,IAAR,CAAa,KAAKC,aAAL,CAAmBH,GAAnB,EAAwBC,KAAxB,CAAb;AACH;AAJkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKnC,kBAAMG,QAAQC,GAAR,CAAYR,OAAZ,CAAN;AACA,mBAAO,IAAP;AACH;;;4CAEmBS,W,EAAaC,Y,EAAc;AAC3C,gBAAIC,oBAAJ;AACA,gBAAI;AACAA,8BAAc,MAAMC,iBAAOC,OAAP,CAAeC,MAAf,CAAsB;AACtCC,2BAAON;AAD+B,iBAAtB,CAApB;AAGA,oBAAI,CAACE,WAAL,EAAkB;AACdhB,kCAAIC,IAAJ,CAAS,eAAea,WAAxB;AACA,2BAAO,MAAMG,iBAAOC,OAAP,CAAeG,MAAf,CAAsB;AAC/BD,+BAAON,WADwB;AAE/BQ,8BAAMP;AAFyB,qBAAtB,CAAb;AAIH;AACJ,aAXD,CAWE,OAAOhB,GAAP,EAAY;AACVC,8BAAIE,KAAJ,CAAU;AACNC,6BAASJ,IAAII,OADP;AAENC,2BAAOL,IAAIK;AAFL,iBAAV,EAGGH,IAHH,sCAG2Ca,WAH3C,qBAGsEE,WAHtE;AAIA,uBAAOjB,GAAP;AACH;AACJ;;;;;;AAGE,IAAMwB,sCAAe,IAAI3C,YAAJ,EAArB","file":"ESMigrations.js","sourcesContent":["import fs from 'fs';\r\nimport {\r\n    Log\r\n} from '../services';\r\nimport { client } from './esclient';\r\nimport path from 'path';\r\nclass ESMigrations {\r\n\r\n    async run() {\r\n        let currentFileName = null;\r\n        try {\r\n            const esIndices = fs.readdirSync(path.join(__dirname, '/es_migrations/'))\r\n                .filter(file => file !== 'index.js');\r\n\r\n            let esIndicesData = {};\r\n            esIndices.forEach(function (filename) {\r\n                currentFileName = filename;\r\n                let content = fs.readFileSync(path.join(__dirname, '/es_migrations/', filename));\r\n                esIndicesData[filename.split('.')[0]] = JSON.parse(content);\r\n            });\r\n            return await this.processMigrations(esIndicesData);\r\n        } catch (err) {\r\n            Log.info(`Error running ES Migrarions for ${currentFileName}. See Log.child.errorMessage `);\r\n            Log.child({\r\n                message: err.message,\r\n                stack: err.stack\r\n            }).info(`Error running ES Migrarions for ${currentFileName}. See Log.child.errorMessage.`);\r\n            return err;\r\n        }\r\n    }\r\n\r\n    async processMigrations(esIndicesData) {\r\n        const results = [];\r\n        for (const [key, value] of Object.entries(esIndicesData)) {\r\n            results.push(this.runMigrations(key, value));\r\n        }\r\n        await Promise.all(results);\r\n        return true;\r\n    }\r\n\r\n    async runMigrations(esIndexName, esIndiceBody) {\r\n        let indexExists;\r\n        try {\r\n            indexExists = await client.indices.exists({\r\n                index: esIndexName\r\n            });\r\n            if (!indexExists) {\r\n                Log.info('New Index ' + esIndexName);\r\n                return await client.indices.create({\r\n                    index: esIndexName,\r\n                    body: esIndiceBody\r\n                });\r\n            }\r\n        } catch (err) {\r\n            Log.child({\r\n                message: err.message,\r\n                stack: err.stack\r\n            }).info(`Error running ES Migrarions for ${esIndexName} and update  ${indexExists}. See Log.child.errorMessage.`);\r\n            return err;\r\n        }\r\n    }\r\n}\r\n\r\nexport const esMigrations = new ESMigrations();"]}