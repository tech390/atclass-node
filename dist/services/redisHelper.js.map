{"version":3,"sources":["../../src/services/redisHelper.js"],"names":["RedisHelper","key","Promise","resolve","reject","redisClient","hgetall","error","data","fields","hmget","get","value","set","field","hset","values","hmset","del","redisHelper"],"mappings":";;;;;;;;;AAAA;;;;;;IACMA,W;;;;;;;+BACKC,G,EAAK;AACR,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCC,mCAAYC,OAAZ,CAAoBL,GAApB,EAAyB,UAACM,KAAD,EAAQC,IAAR,EAAiB;AACtCD,4BAAQH,OAAOG,KAAP,CAAR,GAAwBJ,QAAQK,IAAR,CAAxB;AACH,iBAFD;AAGH,aAJM,CAAP;AAKH;;;kCACSP,G,EAAKQ,M,EAAQ;AACnB,mBAAO,IAAIP,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCC,mCAAYK,KAAZ,4BAAkBT,GAAlB,4BAA0BQ,MAA1B,IAAkC,UAACF,KAAD,EAAQC,IAAR,EAAiB;AAC/CD,4BAAQH,OAAOG,KAAP,CAAR,GAAwBJ,QAAQK,IAAR,CAAxB;AACH,iBAFD;AAGH,aAJM,CAAP;AAKH;;;4BACGP,G,EAAK;AACL,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCC,mCAAYM,GAAZ,CAAgBV,GAAhB,EAAqB,UAACM,KAAD,EAAQC,IAAR,EAAiB;AAClCD,4BAAQH,OAAOG,KAAP,CAAR,GAAwBJ,QAAQK,IAAR,CAAxB;AACH,iBAFD;AAGH,aAJM,CAAP;AAKH;;;4BACGP,G,EAAKW,K,EAAO;AACZ,mBAAO,IAAIV,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCC,mCAAYQ,GAAZ,CAAgBZ,GAAhB,EAAqBW,KAArB,EAA4B,UAACL,KAAD,EAAQC,IAAR,EAAiB;AACzCD,4BAAQH,OAAOG,KAAP,CAAR,GAAwBJ,QAAQK,IAAR,CAAxB;AACH,iBAFD;AAGH,aAJM,CAAP;AAKH;;;6BACIP,G,EAAKa,K,EAAOF,K,EAAO;AACpB,mBAAO,IAAIV,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCC,mCAAYU,IAAZ,CAAiBd,GAAjB,EAAsBa,KAAtB,EAA6BF,KAA7B,EAAoC,UAACL,KAAD,EAAQC,IAAR,EAAiB;AACjDD,4BAAQH,OAAOG,KAAP,CAAR,GAAwBJ,QAAQK,IAAR,CAAxB;AACH,iBAFD;AAGH,aAJM,CAAP;AAKH;;;gCACOP,G,EAAKe,M,EAAQ;AACjB,mBAAO,IAAId,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCC,mCAAYY,KAAZ,4BAAkBhB,GAAlB,4BAA0Be,MAA1B,IAAkC,UAACT,KAAD,EAAQC,IAAR,EAAiB;AAC/CD,4BAAQH,OAAOG,KAAP,CAAR,GAAwBJ,QAAQK,IAAR,CAAxB;AACH,iBAFD;AAGH,aAJM,CAAP;AAKH;;;gCACMP,G,EAAK;AACR,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCC,mCAAYa,GAAZ,CAAgBjB,GAAhB,EAAqB,UAACM,KAAD,EAAQC,IAAR,EAAiB;AAClCD,4BAAQH,OAAOG,KAAP,CAAR,GAAwBJ,QAAQK,IAAR,CAAxB;AACH,iBAFD;AAGH,aAJM,CAAP;AAKH;;;;;;AAGL,IAAMW,cAAc,IAAInB,WAAJ,EAApB;;QAGImB,W,GAAAA,W","file":"redisHelper.js","sourcesContent":["import { redisClient } from './redis';\r\nclass RedisHelper {\r\n    getAll(key) {\r\n        return new Promise((resolve, reject) => {\r\n            redisClient.hgetall(key, (error, data) => {\r\n                error ? reject(error) : resolve(data);\r\n            });\r\n        });\r\n    }\r\n    getFields(key, fields) {\r\n        return new Promise((resolve, reject) => {\r\n            redisClient.hmget(key, ...fields, (error, data) => {\r\n                error ? reject(error) : resolve(data);\r\n            });\r\n        });\r\n    }\r\n    get(key) {\r\n        return new Promise((resolve, reject) => {\r\n            redisClient.get(key, (error, data) => {\r\n                error ? reject(error) : resolve(data);\r\n            });\r\n        });\r\n    }\r\n    set(key, value) {\r\n        return new Promise((resolve, reject) => {\r\n            redisClient.set(key, value, (error, data) => {\r\n                error ? reject(error) : resolve(data);\r\n            });\r\n        });\r\n    }\r\n    hset(key, field, value) {\r\n        return new Promise((resolve, reject) => {\r\n            redisClient.hset(key, field, value, (error, data) => {\r\n                error ? reject(error) : resolve(data);\r\n            });\r\n        });\r\n    }\r\n    setMany(key, values) {\r\n        return new Promise((resolve, reject) => {\r\n            redisClient.hmset(key, ...values, (error, data) => {\r\n                error ? reject(error) : resolve(data);\r\n            });\r\n        });\r\n    }\r\n    delete(key) {\r\n        return new Promise((resolve, reject) => {\r\n            redisClient.del(key, (error, data) => {\r\n                error ? reject(error) : resolve(data);\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nconst redisHelper = new RedisHelper();\r\n\r\nexport {\r\n    redisHelper\r\n};"]}