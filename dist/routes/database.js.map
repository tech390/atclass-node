{"version":3,"sources":["../../src/routes/database.js"],"names":["router","Router","get","req","res","response","status","send","redisHelper","hset","resp","getFields","console","log","JSON","stringify","undefined","knex","select","from","post","payload","body","mapping","atClassQueryRes","elasticSearchService","query","index","isSchemaRequired","getSchema","filterHits","hits","map","x","_source","delete","result","deleteIndex","error","boom","badData","module","exports"],"mappings":";;AAAA;;AAIA;;AAGA;;;;AACA;;;;AAEA,IAAMA,SAAS,IAAIC,eAAJ,EAAf;;AAEAD,OAAOE,GAAP,CAAW,gBAAX,EAA6B,UAACC,GAAD,EAAMC,GAAN,EAAc;AACvC,QAAIC,WAAW;AACXC,gBAAQ;AADG,KAAf;AAGA,WAAOF,IAAIG,IAAJ,CAASF,QAAT,CAAP;AACH,CALD;;AAOAL,OAAOE,GAAP,CAAW,QAAX,EAAqB,gBAAOC,GAAP,EAAYC,GAAZ,EAAoB;AACrC,QAAIC,WAAW;AACXC,gBAAQ;AADG,KAAf;AAGA,UAAME,yBAAYC,IAAZ,CAAiB,YAAjB,EAA+B,YAA/B,EAA6C,yBAA7C,CAAN;AACA,QAAIC,OAAO,MAAMF,yBAAYG,SAAZ,CAAsB,YAAtB,EAAoC,CAAC,YAAD,CAApC,CAAjB;AACAC,YAAQC,GAAR,CAAY,WAAZ,EAAyBC,KAAKC,SAAL,CAAeL,IAAf,EAAqBM,SAArB,EAAgC,CAAhC,CAAzB;AACA,WAAOZ,IAAIG,IAAJ,CAAS,EAAEF,kBAAF,EAAYK,UAAZ,EAAT,CAAP;AACH,CARD;;AAUAV,OAAOE,GAAP,CAAW,QAAX,EAAqB,gBAAOC,GAAP,EAAYC,GAAZ,EAAoB;AACrC,QAAIC,WAAW;AACXC,gBAAQ;AADG,KAAf;AAGA,QAAII,OAAO,MAAMO,eAAKC,MAAL,CAAY,iBAAZ,EAA+B,MAA/B,EAAuC,QAAvC,EAAiDC,IAAjD,CAAsD,gBAAtD,CAAjB;AACAP,YAAQC,GAAR,CAAY,WAAZ,EAAyBC,KAAKC,SAAL,CAAeL,IAAf,EAAqBM,SAArB,EAAgC,CAAhC,CAAzB;AACA,WAAOZ,IAAIG,IAAJ,CAAS,EAAEF,kBAAF,EAAYK,UAAZ,EAAT,CAAP;AACH,CAPD;;AAWAV,OAAOoB,IAAP,CAAY,sBAAZ,EAAoC,gBAAOjB,GAAP,EAAYC,GAAZ,EAAoB;AACpD,QAAMiB,UAAUlB,IAAImB,IAApB;AACA,QAAIC,gBAAJ;AACA,QAAIC,kBAAkB,MAAMC,2CAAqBC,KAArB,CAA2BL,QAAQM,KAAnC,EAA0CN,QAAQK,KAAlD,CAA5B;AACA,QAAIL,QAAQO,gBAAZ,EAA8B;AAC1BL,kBAAU,MAAME,2CAAqBI,SAArB,CAA+BR,QAAQM,KAAvC,CAAhB;AACH;AACD,QAAIN,QAAQS,UAAZ,EAAwB;AACpBN,0BAAkBA,gBAAgBO,IAAhB,CAAqBA,IAArB,CAA0BC,GAA1B,CAA8B;AAAA,mBAAKC,EAAEC,OAAP;AAAA,SAA9B,CAAlB;AACH;AACD9B,QAAIG,IAAJ,CAAS;AACLiB,wCADK;AAELD;AAFK,KAAT;AAIH,CAdD;;AAgBAvB,OAAOmC,MAAP,CAAc,2BAAd,EAA2C,gBAAOhC,GAAP,EAAYC,GAAZ,EAAoB;AAC3D,QAAIgC,MAAJ;AACA,QAAI;AACAA,iBAAS,MAAMX,2CAAqBY,WAArB,CAAiClC,IAAImB,IAAJ,CAASK,KAA1C,CAAf;AACAvB,YAAIG,IAAJ,CAAS;AACL6B;AADK,SAAT;AAGH,KALD,CAKE,OAAOE,KAAP,EAAc;AACZlC,YAAImC,IAAJ,CAASC,OAAT,CAAiBF,KAAjB;AACH;AACJ,CAVD;;AAaAG,OAAOC,OAAP,GAAiB1C,MAAjB","file":"database.js","sourcesContent":["import {\r\n    Router,\r\n    response\r\n} from 'express';\r\nimport {\r\n    elasticSearchService\r\n} from '../services/elasticSearchService';\r\nimport knex from '../db/knex';\r\nimport { redisHelper } from '../services/redisHelper';\r\n\r\nconst router = new Router();\r\n\r\nrouter.get('/elasticsearch', (req, res) => {\r\n    let response = {\r\n        status: 'AtClass elasticsearch db'\r\n    }\r\n    return res.send(response);\r\n});\r\n\r\nrouter.get('/redis', async (req, res) => {\r\n    let response = {\r\n        status: 'AtClass redis-db'\r\n    };\r\n    await redisHelper.hset('redis_test', 'sampleData', 'this data is from redis');\r\n    let resp = await redisHelper.getFields('redis_test', ['sampleData']);\r\n    console.log('redis res', JSON.stringify(resp, undefined, 2));\r\n    return res.send({ response, resp });\r\n});\r\n\r\nrouter.get('/mysql', async (req, res) => {\r\n    let response = {\r\n        status: 'AtClass mysql bd'\r\n    }\r\n    let resp = await knex.select('PersonalDetails', 'Name', 'HasJob').from('mysql_metadata');\r\n    console.log('mysql res', JSON.stringify(resp, undefined, 2));\r\n    return res.send({ response, resp });\r\n});\r\n\r\n\r\n\r\nrouter.post('/elasticsearch/query', async (req, res) => {\r\n    const payload = req.body;\r\n    let mapping;\r\n    let atClassQueryRes = await elasticSearchService.query(payload.index, payload.query);\r\n    if (payload.isSchemaRequired) {\r\n        mapping = await elasticSearchService.getSchema(payload.index);\r\n    }\r\n    if (payload.filterHits) {\r\n        atClassQueryRes = atClassQueryRes.hits.hits.map(x => x._source);\r\n    }\r\n    res.send({\r\n        atClassQueryRes,\r\n        mapping\r\n    });\r\n});\r\n\r\nrouter.delete('elasticsearch/deleteindex', async (req, res) => {\r\n    var result;\r\n    try {\r\n        result = await elasticSearchService.deleteIndex(req.body.index);\r\n        res.send({\r\n            result\r\n        });\r\n    } catch (error) {\r\n        res.boom.badData(error);\r\n    }\r\n});\r\n\r\n\r\nmodule.exports = router;"]}