{"version":3,"sources":["../src/index.js"],"names":["require","config","process","backendService","dbBootstraped","esMigrated","app","set","use","bodyParser","json","LogMiddleware","auth","Router","build","Log","info","dbBootstrap","run","e","child","message","stack","error","Promise","reject","esMigrations","createApp","env","PORT","NODE_environment","msg","Error","port","init","DOCKER_HOST","server","listen","err","waitFnc","initDB","initESMigrations","isAppReadyForTest","on","stop","resolve","setTimeout","console","log","close","exit","Server","start"],"mappings":"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","file":"index.js","sourcesContent":["require('dotenv').config();\r\nconst process = require('process');\r\nimport express from 'express';\r\nimport bodyParser from 'body-parser';\r\nimport Boom from 'express-boom';\r\nimport {\r\n    Router\r\n} from './routes';\r\nimport {\r\n    LogMiddleware,\r\n    Log\r\n} from './services';\r\nimport {\r\n    dbBootstrap,\r\n    esMigrations\r\n} from './db';\r\nimport cors from 'cors';\r\nimport { auth } from './services/authMiddlewares';\r\n\r\nexport class backendService {\r\n    constructor(dbBootstraped = false, esMigrated = false) {\r\n        this.dbBootstraped = false;\r\n        this.esMigrated = false;\r\n    }\r\n    createApp() {\r\n        const app = express();\r\n        app.set('HEALTH_STATUS', 'INITIALIZING');\r\n        app.use(bodyParser.json());\r\n        app.use(Boom());\r\n        app.use(LogMiddleware);\r\n        app.use(cors());\r\n        app.use(auth);\r\n        Router.build(app);\r\n\r\n        return app;\r\n    }\r\n\r\n    async initDB() {\r\n        try {\r\n            Log.info('Initializing dbBootstrap');\r\n            await dbBootstrap.run();\r\n            Log.info('dbBootstrap sucessful and migrations ran');\r\n            this.dbBootstraped = true;\r\n        } catch (e) {\r\n            Log.child({\r\n                message: e.message,\r\n                stack: e.stack\r\n            }).error('Error bootstraping the database.');\r\n            this.app.set('HEALTH_STATUS', 'DB_MIGRATION_FAILED');\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    async initESMigrations() {\r\n        try {\r\n            Log.info('Initializing initESMigrations');\r\n            await esMigrations.run();\r\n            this.esMigrated = true;\r\n            Log.info('Completed initESMigrations');\r\n        } catch (e) {\r\n            Log.child({\r\n                message: e.message,\r\n                stack: e.stack\r\n            }).error('Error bootstraping the eSMigrations.');\r\n            this.app.set('HEALTH_STATUS', 'ES_MIGRATION_FAILED');\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    init() {\r\n        Log.info('Initializing AtClass-app');\r\n        this.app = this.createApp();\r\n        const {\r\n            PORT,\r\n            NODE_environment\r\n        } = process.env;\r\n\r\n        // ENV Argument Checks\r\n        if (!PORT || !NODE_environment) {\r\n            const msg =\r\n                'Configuration Error: you must specify these ENV variables: PORT, NODE_environment';\r\n            Log.error(msg);\r\n            throw new Error(msg);\r\n        }\r\n\r\n        this.port = PORT;\r\n        this.env = NODE_environment;\r\n    }\r\n\r\n    async start() {\r\n        this.init();\r\n        const DOCKER_HOST = '0.0.0.0';\r\n\r\n        const server = this.app.listen(this.port, DOCKER_HOST, err => {\r\n            if (err) {\r\n                this.app.set('HEALTH_STATUS', 'SERVER_LISTEN_FAILED');\r\n                throw err;\r\n            }\r\n\r\n            Log.info(`Server started on http://${DOCKER_HOST}:${this.port}`);\r\n        });\r\n\r\n        await this.waitFnc();\r\n\r\n        if (!this.dbBootstraped) {\r\n            await this.initDB();\r\n        }\r\n\r\n        if (!this.esMigrated) {\r\n            await this.initESMigrations();\r\n        }\r\n        if (\r\n            this.env === 'development' ||\r\n            this.env === 'testing' ||\r\n            this.env === 'test'\r\n        ) {\r\n            process.env.isAppReadyForTest = true;\r\n        }\r\n\r\n        this.app.set('HEALTH_STATUS', 'READY');\r\n        Log.info('Initialization successful. Service is Ready.');\r\n\r\n        // Shutdown Hook\r\n        process.on('SIGTERM', () => {\r\n            this.stop(server);\r\n        });\r\n        process.on('unhandledRejection', e => {\r\n            Log.child({\r\n                message: e.message,\r\n                stack: e.stack\r\n            }).error('Error due to unhandledRejection.');\r\n        });\r\n        return Promise.resolve();\r\n    }\r\n\r\n\r\n    waitFnc() {\r\n        return new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n                console.log('waiting for 3 sec');\r\n                resolve(\"3 sec\");\r\n            }, 3000)\r\n        });\r\n    }\r\n\r\n    stop(server) {\r\n        Log.info('Starting graceful shutdown...');\r\n        this.app.set('HEALTH_STATUS', 'SHUTTING_DOWN');\r\n\r\n        //LoadingDock.readShutdown();\r\n\r\n        setTimeout(() => {\r\n            server.close(() => {\r\n                Log.info('Shutdown Complete.');\r\n                process.exit(0);\r\n            });\r\n        }, 3000);\r\n    }\r\n}\r\n\r\nexport const Server = new backendService();\r\n// Start the service when run from command line\r\nif (\r\n    (process.env.NODE_environment === 'production' ||\r\n        process.env.NODE_environment === 'development')\r\n) {\r\n    Log.info('AtClass-app: Server started');\r\n    Server.start();\r\n} else {\r\n    Log.error('AtClass-app: Server not started.');\r\n}"]}