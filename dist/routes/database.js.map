{"version":3,"sources":["../../src/routes/database.js"],"names":["router","Router","get","req","res","response","status","send","error","Log","info","boom","badData","redisHelper","hset","resp","getFields","console","log","JSON","stringify","undefined","knex","select","from","post","payload","body","mapping","atClassQueryRes","elasticSearchService","query","index","isSchemaRequired","getSchema","filterHits","hits","map","x","_source","delete","result","deleteIndex","module","exports"],"mappings":"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","file":"database.js","sourcesContent":["import {\r\n    Router,\r\n    response\r\n} from 'express';\r\nimport {\r\n    elasticSearchService\r\n} from '../services/elasticSearchService';\r\nimport knex from '../db/knex';\r\nimport { redisHelper } from '../services/redisHelper';\r\nimport { Log } from '../services/log'\r\n\r\n\r\nconst router = new Router();\r\n\r\nrouter.get('/elasticsearch', (req, res) => {\r\n    try {\r\n        let response = {\r\n            status: 'AtClass elasticsearch db'\r\n        }\r\n        return res.send(response);\r\n    } catch (error) {\r\n        Log.info('Error - ', error);\r\n        res.boom.badData(error);\r\n    }\r\n\r\n});\r\n\r\nrouter.get('/redis', async (req, res) => {\r\n    try {\r\n        let response = {\r\n            status: 'AtClass redis-db'\r\n        };\r\n        await redisHelper.hset('redis_test', 'sampleData', 'this data is from redis');\r\n        let resp = await redisHelper.getFields('redis_test', ['sampleData']);\r\n        console.log('redis res', JSON.stringify(resp, undefined, 2));\r\n        return res.send({ response, resp });\r\n    } catch (error) {\r\n        Log.info('Error - ', error);\r\n        res.boom.badData(error);\r\n    }\r\n});\r\n\r\nrouter.get('/mysql', async (req, res) => {\r\n    try {\r\n        let response = {\r\n            status: 'AtClass mysql bd'\r\n        }\r\n        let resp = await knex.select('PersonalDetails', 'Name', 'HasJob').from('mysql_metadata');\r\n        console.log('mysql res', JSON.stringify(resp, undefined, 2));\r\n        return res.send({ response, resp });\r\n    } catch (error) {\r\n        Log.info('Error - ', error);\r\n        res.boom.badData(error);\r\n    }\r\n});\r\n\r\n\r\nrouter.post('/elasticsearch/query', async (req, res) => {\r\n    try {\r\n        const payload = req.body;\r\n        let mapping;\r\n        let atClassQueryRes = await elasticSearchService.query(payload.index, payload.query);\r\n        if (payload.isSchemaRequired) {\r\n            mapping = await elasticSearchService.getSchema(payload.index);\r\n        }\r\n        if (payload.filterHits) {\r\n            atClassQueryRes = atClassQueryRes.hits.hits.map(x => x._source);\r\n        }\r\n        res.send({\r\n            atClassQueryRes,\r\n            mapping\r\n        });\r\n    } catch (error) {\r\n        Log.info('Error - ', error);\r\n        res.boom.badData(error);\r\n    }\r\n});\r\n\r\nrouter.delete('elasticsearch/deleteindex', async (req, res) => {\r\n    var result;\r\n    try {\r\n        result = await elasticSearchService.deleteIndex(req.body.index);\r\n        res.send({\r\n            result\r\n        });\r\n    } catch (error) {\r\n        res.boom.badData(error);\r\n    }\r\n});\r\n\r\n\r\nmodule.exports = router;"]}